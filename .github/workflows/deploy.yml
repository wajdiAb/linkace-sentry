name: Deploy to EC2

on:
  pull_request:
    branches:
      - main  # or your deployment branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Get code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx mock allure-pytest
        pip install docker paramiko boto3
    
    # - name: Copy docker-compose file to EC2
    #   uses: appleboy/scp-action@v0.1.7
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ubuntu
    #     key: ${{ secrets.EC2_SSH_KEY }}
    #     source: "docker-compose.yml"
    #     target: "/home/ubuntu/LinkAce2/"


    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Update and install Docker if not already installed
          sudo apt-get update -y
          sudo apt-get install -y docker.io docker-compose-plugin git jq
          sudo usermod -aG docker ubuntu || true

          
          # Clean up ALL existing containers first
          echo "🧹 Cleaning up existing containers..."
          docker stop $(docker ps -q) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          docker system prune -af || true

          
          # Clean up directories completely and start fresh
          cd /home/ubuntu
          rm -rf LinkAce2 linkace-sentry
          mkdir -p LinkAce2
          cd LinkAce2

        

           # Clone the complete repository for source code
          echo "📥 Cloning linkace-sentry repository..."
          git clone https://github.com/wajdiAb/linkace-sentry.git
          
          # Copy the environment file to the cloned repo
          cp .env linkace-sentry/
          cd linkace-sentry

          # starting linkace application
          cd ~/LinkAce2
          touch database.sqlite
          chmod 0766 database.sqlite
          docker run -d --name linkace_app_1 -p "8080:80" -v "./database.sqlite:/app/database/database.sqlite" linkace/linkace
          
          sleep 10
          docker exec -i linkace_app_1 php artisan migrate --force
          docker exec -i linkace_app_1 php artisan setup:complete
          docker exec -i linkace_app_1 php artisan registeruser --admin <<EOF
          ${{ secrets.LINKACE_NAME }}
          ${{ secrets.LINKACE_EMAIL }}
          ${{ secrets.LINKACE_PASSWORD }}
          EOF

          echo "🔑 Generating API token..."
          API_TOKEN=$(
            docker exec -i -w /app linkace_app_1 bash -lc '
              set -e
              php -r "
                require \"vendor/autoload.php\";
                \$app = require \"bootstrap/app.php\";
                \$kernel = \$app->make(Illuminate\\Contracts\\Console\\Kernel::class);
                \$kernel->bootstrap();

                // 🔒 Query by the exact email you just registered (no getenv dependency)
                \$email = \"'${{ secrets.LINKACE_EMAIL }}'\";
                \$user = App\\Models\\User::where(\"email\", \$email)->first();
                if (!\$user) { fwrite(STDERR, \"NO_USER_FOR_\".\$email.\"\\n\"); exit(2); }
                echo \$user->createToken(\"LinkAce-Sentry-Auto-Token\")->plainTextToken;
              ";
            ' 2>/dev/null | tr -d '\r\n'
          )

          if [ -z "$API_TOKEN" ]; then
            echo "❌ Failed to generate API token automatically (empty token)"
            # quick diagnostics:
            docker exec -i -w /app linkace_app_1 php artisan --version || true
            docker exec -i -w /app linkace_app_1 php -r 'echo file_exists("vendor/autoload.php") ? "autoload:yes\n":"autoload:no\n";' || true
            exit 1
          fi

          echo "::add-mask::$API_TOKEN"
          echo "✅ API token generated. First 20 chars: ${API_TOKEN:0:20}..."
          

          # Add some test bookmarks to verify everything works
          echo "📚 Adding test bookmarks..."
          
          # Test bookmark 1 - Working link
          curl -X POST "http://localhost:8080/api/v1/links" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "https://httpbin.org/status/200",
              "title": "Test Working Link",
              "description": "This link should work fine"
            }' || echo "⚠️ Failed to add working test link"

          # Test bookmark 2 - Dead link (will trigger notification)
          curl -X POST "http://localhost:8080/api/v1/links" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "https://httpbin.org/status/404",
              "title": "Test Dead Link", 
              "description": "This link should be detected as dead"
            }' || echo "⚠️ Failed to add dead test link"

          # Test bookmark 3 - Redirect link
          curl -X POST "http://localhost:8080/api/v1/links" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "https://httpbin.org/redirect/3",
              "title": "Test Redirect Link",
              "description": "This link should be detected as redirected"
            }' || echo "⚠️ Failed to add redirect test link"

          # Test bookmark 4 - Slow response link
          curl -X POST "http://localhost:8080/api/v1/links" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "https://httpbin.org/delay/2",
              "title": "Test Slow Link",
              "description": "This link responds slowly but should work"
            }' || echo "⚠️ Failed to add slow test link"

          echo "✅ Test bookmarks added!"

          # Verify bookmarks were added
          echo "🔍 Verifying bookmarks..."
          BOOKMARK_COUNT=$(curl -s "http://localhost:8080/api/v1/links" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.meta.total // 0' 2>/dev/null || echo "0")

          echo "📊 Total bookmarks in LinkAce: $BOOKMARK_COUNT"

          if [ "$BOOKMARK_COUNT" -gt "0" ]; then
            echo "✅ Bookmarks successfully added to LinkAce!"
          else
            echo "⚠️ No bookmarks found - API might not be working correctly"
          fi

          # Create/overwrite .env for compose
          cat > /home/ubuntu/LinkAce2/.env << EOF
          LINKACE_BASE_URL=http://localhost:8080
          LINKACE_API_TOKEN=$API_TOKEN
          ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}
          AWS_SNS_TOPIC_ARN=${{ secrets.AWS_SNS_TOPIC_ARN }}
          AWS_REGION=eu-west-1
          CHECK_INTERVAL_MIN=30
          CONCURRENCY=10
          TAG_DEAD_NAME=dead
          TAG_REDIRECTED_NAME=redirected
          UPDATE_MODE=tags
          EOF


          # Build and start LinkAce Sentry (this includes source code)
          echo "🔍 Building and starting LinkAce Sentry..."
          
          # Make sure we're in the right directory with source code
          ls -la src/  # Verify source code exists
          
          # Build the image locally to include source code
          docker build -t linkace-sentry-local .
          
          # Update docker-compose to use local build
          sed -i 's/image: wajdiab\/linkace-sentry:0\.0\.2/image: linkace-sentry-local/' docker-compose.yml
          
          # Start the service
          docker compose up -d linkace-sentry
          
          # Verify the deployment
          docker ps
          docker logs linkace-sentry --tail 100

    - name: Test Application Code
      env:
        # Set the required environment variables for testing
        LINKACE_API_TOKEN: ${{ secrets.LINKACE_API_TOKEN_EC2 }}
        ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        AWS_SNS_TOPIC_ARN: ${{ secrets.AWS_SNS_TOPIC_ARN }}
        AWS_REGION: eu-west-1
        LINKACE_BASE_URL: http://localhost:8080
        CHECK_INTERVAL_MIN: 30
        CONCURRENCY: 10
        TAG_DEAD_NAME: dead
        TAG_REDIRECTED_NAME: redirected
        UPDATE_MODE: tags 
      run: |
        # Run existing pytest suite
        pytest tests/ -v --tb=short
        echo "✅ Application tests passed"