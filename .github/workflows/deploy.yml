name: Deploy to EC2

on:
  pull_request:
    branches:
      - main  # or your deployment branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Get code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx mock allure-pytest
        pip install docker paramiko boto3
    
    # - name: Copy docker-compose file to EC2
    #   uses: appleboy/scp-action@v0.1.7
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ubuntu
    #     key: ${{ secrets.EC2_SSH_KEY }}
    #     source: "docker-compose.yml"
    #     target: "/home/ubuntu/LinkAce2/"


    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Update and install Docker if not already installed
          sudo apt-get update -y
          sudo apt-get install -y docker.io docker-compose-plugin git jq
          sudo usermod -aG docker ubuntu || true

          
          # Clean up ALL existing containers first
          echo "üßπ Cleaning up existing containers..."
          docker stop $(docker ps -q) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          docker system prune -af || true

          
          # Clean up directories completely and start fresh
          cd /home/ubuntu
          rm -rf LinkAce2 linkace-sentry
          mkdir -p LinkAce2
          cd LinkAce2

          # Create/overwrite .env for compose
          cat > /home/ubuntu/LinkAce2/.env << EOF
          LINKACE_BASE_URL=http://localhost:8080
          LINKACE_API_TOKEN=$API_TOKEN
          ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}
          AWS_SNS_TOPIC_ARN=${{ secrets.AWS_SNS_TOPIC_ARN }}
          AWS_REGION=eu-west-1
          CHECK_INTERVAL_MIN=30
          CONCURRENCY=10
          TAG_DEAD_NAME=dead
          TAG_REDIRECTED_NAME=redirected
          UPDATE_MODE=tags
          EOF
        

           # Clone the complete repository for source code
          echo "üì• Cloning linkace-sentry repository..."
          git clone https://github.com/wajdiAb/linkace-sentry.git
          
          # Copy the environment file to the cloned repo
          cp .env linkace-sentry/
          cd linkace-sentry

          # starting linkace application
          cd ~/LinkAce2
          touch database.sqlite
          chmod 0766 database.sqlite
          docker run -d --name linkace_app_1 -p "8080:80" -v "./database.sqlite:/app/database/database.sqlite" linkace/linkace
          
          sleep 10
          docker exec -i linkace_app_1 php artisan migrate --force
          docker exec -i linkace_app_1 php artisan setup:complete
          docker exec -i linkace_app_1 php artisan registeruser --admin <<EOF
          ${{ secrets.LINKACE_NAME }}
          ${{ secrets.LINKACE_EMAIL }}
          ${{ secrets.LINKACE_PASSWORD }}
          EOF

          echo "üîë Generating API token..."
          PHP_SNIPPET='
          require "/app/vendor/autoload.php";
          $app = require "/app/bootstrap/app.php";
          $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
          $kernel->bootstrap();

          $email = getenv("LA_EMAIL");
          $user  = \App\Models\User::where("email", $email)->first();
          if (!$user) { fwrite(STDERR, "ERROR: user not found for $email\n"); exit(1); }
          if (!method_exists($user, "createToken")) {
              fwrite(STDERR, "ERROR: createToken() not available. Create a token in the UI instead.\n");
              exit(2);
          }
          $token = $user->createToken("LinkAce-Sentry-Auto-Token");
          echo "TOKEN=".$token->plainTextToken."\n";
          ';

          API_TOKEN=$(docker exec -e LA_EMAIL="${{ secrets.LINKACE_EMAIL }}" linkace_app_1 \
            php -r "$PHP_SNIPPET" 2>&1 | sed -n 's/^TOKEN=//p' | tail -n1)

          if [[ -z "$API_TOKEN" || "$API_TOKEN" != *"|"* ]]; then
            echo "‚ùå Failed to generate API token automatically"
            exit 1
          fi

          echo "‚úÖ API token generated. First 20 chars: ${API_TOKEN:0:20}..."
          
          echo "üìö Adding test bookmarks..."

          curl -sS -X POST "http://localhost:8080/api/v2/links" \
            -H "Authorization: Bearer $API_TOKEN" -H "Accept: application/json" -H "Content-Type: application/json" \
            -d '{"url":"https://httpbin.org/status/200","title":"Test Working Link","description":"This link should work fine"}' \
            || echo "‚ö†Ô∏è Failed to add working test link"

          curl -sS -X POST "http://localhost:8080/api/v2/links" \
            -H "Authorization: Bearer $API_TOKEN" -H "Accept: application/json" -H "Content-Type: application/json" \
            -d '{"url":"https://httpbin.org/status/404","title":"Test Dead Link","description":"This link should be detected as dead"}' \
            || echo "‚ö†Ô∏è Failed to add dead test link"

          curl -sS -X POST "http://localhost:8080/api/v2/links" \
            -H "Authorization: Bearer $API_TOKEN" -H "Accept: application/json" -H "Content-Type: application/json" \
            -d '{"url":"https://httpbin.org/redirect/3","title":"Test Redirect Link","description":"This link should be detected as redirected"}' \
            || echo "‚ö†Ô∏è Failed to add redirect test link"

          curl -sS -X POST "http://localhost:8080/api/v2/links" \
            -H "Authorization: Bearer $API_TOKEN" -H "Accept: application/json" -H "Content-Type: application/json" \
            -d '{"url":"https://httpbin.org/delay/2","title":"Test Slow Link","description":"This link responds slowly but should work"}' \
            || echo "‚ö†Ô∏è Failed to add slow test link"

          echo "üîç Verifying bookmarks..."
          BOOKMARK_COUNT=$(curl -s "http://localhost:8080/api/v2/links" \
            -H "Authorization: Bearer $API_TOKEN" -H "Accept: application/json" \
            | jq -r '.meta.total // 0' 2>/dev/null || echo "0")
          echo "üìä Total bookmarks in LinkAce: $BOOKMARK_COUNT"

          


          # Build and start LinkAce Sentry (this includes source code)
          echo "üîç Building and starting LinkAce Sentry..."
          
          # Make sure we're in the right directory with source code
          ls -la src/  # Verify source code exists
          
          # Build the image locally to include source code
          docker build -t linkace-sentry-local .
          
          # Update docker-compose to use local build
          sed -i 's/image: wajdiab\/linkace-sentry:0\.0\.2/image: linkace-sentry-local/' docker-compose.yml
          
          # Start the service
          docker compose up -d linkace-sentry
          
          # Verify the deployment
          docker ps
          docker logs linkace-sentry --tail 100

    - name: Test Application Code
      env:
        # Set the required environment variables for testing
        LINKACE_API_TOKEN: ${{ secrets.LINKACE_API_TOKEN_EC2 }}
        ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        AWS_SNS_TOPIC_ARN: ${{ secrets.AWS_SNS_TOPIC_ARN }}
        AWS_REGION: eu-west-1
        LINKACE_BASE_URL: http://localhost:8080
        CHECK_INTERVAL_MIN: 30
        CONCURRENCY: 10
        TAG_DEAD_NAME: dead
        TAG_REDIRECTED_NAME: redirected
        UPDATE_MODE: tags 
      run: |
        # Run existing pytest suite
        pytest tests/ -v --tb=short
        echo "‚úÖ Application tests passed"