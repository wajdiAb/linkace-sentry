name: Deploy to EC2

on:
  pull_request:
    branches:
      - main  # or your deployment branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Get code
      uses: actions/checkout@v4
    
    - name: Copy docker-compose file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml"
        target: "/home/ubuntu/LinkAce2/"


    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Update and install Docker if not already installed
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose

          
          # Clean up ALL existing containers first
          echo "🧹 Cleaning up existing containers..."
          docker stop $(docker ps -q) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true

          # Clean up directories and start fresh
          cd /home/ubuntu
          rm -rf LinkAce2 linkace-sentry
          mkdir -p LinkAce2
          cd LinkAce2

          # Create/overwrite .env for compose
          cat > /home/ubuntu/LinkAce2/.env << EOF
          LINKACE_BASE_URL=http://localhost:8080
          LINKACE_API_TOKEN=${{ secrets.LINKACE_API_TOKEN_EC2 }}
          ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}
          AWS_SNS_TOPIC_ARN=${{ secrets.AWS_SNS_TOPIC_ARN }}
          AWS_REGION=eu-west-1
          CHECK_INTERVAL_MIN=30
          CONCURRENCY=10
          TAG_DEAD_NAME=dead
          TAG_REDIRECTED_NAME=redirected
          UPDATE_MODE=tags
          EOF

           # Clone the complete repository for source code
          echo "📥 Cloning linkace-sentry repository..."
          git clone https://github.com/wajdiAb/linkace-sentry.git
          
          # Copy the environment file to the cloned repo
          cp .env linkace-sentry/
          cd linkace-sentry

          # starting linkace application
          cd ~/LinkAce2
          touch database.sqlite
          chmod 0766 database.sqlite
          docker run -d -p "8080:80" -v "./database.sqlite:/app/database/database.sqlite" linkace/linkace
          
          sleep 10
          docker exec -i linkace_dev-php-1 php artisan migrate --force
          docker exec -i linkace_dev-php-1 php artisan setup:complete
          docker exec -i linkace_dev-php-1 php artisan registeruser --admin <<EOF
          ${{ secrets.LINKACE_NAME }}
          ${{ secrets.LINKACE_EMAIL }}
          ${{ secrets.LINKACE_PASSWORD }}
          EOF

          # Build and start LinkAce Sentry (this includes source code)
          echo "🔍 Building and starting LinkAce Sentry..."
          
          # Make sure we're in the right directory with source code
          ls -la src/  # Verify source code exists
          
          # Build the image locally to include source code
          docker build -t linkace-sentry-local .
          
          # Update docker-compose to use local build
          sed -i 's/image: wajdiab\/linkace-sentry:0\.0\.2/image: linkace-sentry-local/' docker-compose.yml
          
          # Start the service
          docker compose up -d linkace-sentry
          
          # Verify the deployment
          docker ps
          docker logs linkace-sentry --tail 100